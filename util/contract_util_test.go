package util

import (
	"fmt"
	"github.com/netcloth/netcloth-chain/hexutil"
	"github.com/stretchr/testify/require"
	"math/big"
	"testing"
)

const (
	abiFile = "/Users/sun/Desktop/abi"
)

func Test_UnpackValuesByABIFile(t *testing.T) {
	const (
		funcName = "ipals"
		res      = "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000116e6574636c6f74682d6f6666696369616c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003277b226f70657261746f725f61646472657373223a226e636831306a7a70743332677772616476396d636e72366675756a30746e783772713070736d6d746a75222c226d6f6e696b6572223a226e6574636c6f74682d6f6666696369616c222c2277656273697465223a226e6574636c6f74682e6f7267222c2264657461696c73223a226e6574636c6f74682d6f6666696369616c222c22656e64706f696e7473223a5b7b2274797065223a2231222c22656e64706f696e74223a22687474703a2f2f34372e3130342e3138392e35227d2c7b2274797065223a2233222c22656e64706f696e74223a22687474703a2f2f34372e39302e352e313338227d2c7b2274797065223a2234222c22656e64706f696e74223a227b5c226d696e69417070446f6d61696e735c223a5b7b5c226d6f6e696b65725c223a5c224e6574436c6f746820426c6f675c222c5c22646f6d61696e5c223a5c2268747470733a2f2f626c6f672e6e6574636c6f74682e6f72675c227d2c7b5c226d6f6e696b65725c223a5c22e993bee997bbe7a4be5c222c5c22646f6d61696e5c223a5c2268747470733a2f2f7777772e636861696e6e6577732e636f6d2f5c227d2c7b5c226d6f6e696b65725c223a5c22e99d9ee5b08fe58fb75c222c5c22646f6d61696e5c223a5c2268747470733a2f2f6665697869616f68616f2e636f6d5c227d2c7b5c226d6f6e696b65725c223a5c22e98791e8b4a2e5bfabe8aeaf5c222c5c22646f6d61696e5c223a5c2268747470733a2f2f6d2e6a696e73652e636f6d2f6c697665735c227d2c7b5c226d6f6e696b65725c223a5c224e6574436c6f746820426c6f675c222c5c22646f6d61696e5c223a5c2268747470733a2f2f6d656469756d2e636f6d2f404e6574436c6f74682f5c227d2c7b5c226d6f6e696b65725c223a5c22436f696e6465736b5c222c5c22646f6d61696e5c223a5c2268747470733a2f2f7777772e636f696e6465736b2e636f6d5c227d2c7b5c226d6f6e696b65725c223a5c22436f696e6d61726b65746361705c222c5c22646f6d61696e5c223a5c2268747470733a2f2f7777772e636f696e6d61726b65746361702e636f6d205c227d5d7d227d5d7d00000000000000000000000000000000000000000000000000"
	)

	d, err := hexutil.Decode(res)
	require.True(t, err == nil)

	values, err := UnpackValuesByABIFile(abiFile, funcName, d)
	require.True(t, err == nil)

	for _, v := range values {
		t.Log(fmt.Sprintf("%v", v))
	}
}

func Test_PackValuesByABIFile(t *testing.T) {
	const (
		abiFile  = "/Users/sun/nch/contract/alltypes/alltypes.abi"
		funcName = "testint256"
	)

	v, success := big.NewInt(0).SetString("57896044618658097711785492504343953926634992332820282019728792003956564819968", 10)
	require.True(t, success == true)
	value, err := BuildPayloadByABIFile(abiFile, funcName, v)
	require.True(t, err == nil)

	t.Log(fmt.Sprintf("%x", value))
}

func Test_PackValuesByABIFile1(t *testing.T) {

	value, err := BuildPayloadByABIFile("/Users/sun/Desktop/abi2", "ipalClaim", "Q岛", `{"operator_address":"nch1nqa7u8yyy39lygmen0p6mfr3as83xpplhqkr2s","moniker":"Q岛","website":"www.hznuodetech.com","details":"qisland official","extension":"","endpoints":[{"type":"1","endpoint":"http://47.104.199.106"}]}`)
	require.True(t, err == nil)

	t.Log(fmt.Sprintf("%x", value))

	listdstr := "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000f424a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000451e5b29b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dc7b226f70657261746f725f61646472657373223a226e6368316e716137753879797933396c79676d656e3070366d667233617338337870706c68716b723273222c226d6f6e696b6572223a2251e5b29b222c2277656273697465223a227777772e687a6e756f6465746563682e636f6d222c2264657461696c73223a227169736c616e64206f6666696369616c222c22657874656e73696f6e223a22222c22656e64706f696e7473223a5b7b2274797065223a2231222c22656e64706f696e74223a22687474703a2f2f34372e3130342e3139392e313036227d5d7d00000000"
	listd, err := hexutil.Decode(listdstr)

	values, err := UnpackValuesByABIFile("/Users/sun/Desktop/abi2", "ipals", listd)
	require.True(t, err == nil)

	for _, v := range values {
		t.Log(fmt.Sprintf("%x", v))
	}

	s1, err := hexutil.Decode("51e5b29b")
	s2, err := hexutil.Decode("7b226f70657261746f725f61646472657373223a226e6368316e716137753879797933396c79676d656e3070366d667233617338337870706c68716b723273222c226d6f6e696b6572223a2251e5b29b222c2277656273697465223a227777772e687a6e756f6465746563682e636f6d222c2264657461696c73223a227169736c616e64206f6666696369616c222c22657874656e73696f6e223a22222c22656e64706f696e7473223a5b7b2274797065223a2231222c22656e64706f696e74223a22687474703a2f2f34372e3130342e3139392e313036227d5d7d")
	s3, err := hexutil.DecodeUint64("f424a")

	t.Log(fmt.Sprintf("s1:%s\ns2:%s\ns3:%d", s1, s2, s3))

}
